syntax = "proto3";

import "datastructs.proto";

package upns;

// COMP_ID:  20 for Requests, 21 for Replies.
// MSG_TYPE: same for req/rep-pairs. >100 indicates writing access to the server.

/**
message Region {
  int64 layerId = 1;

  float minx = 2;
  float maxx = 3;
  float miny = 4;
  float maxy = 5;
  float minz = 6;
  float maxz = 7;
  int32 levelOfDetail = 8;
  bool announce = 9;
  ClipMode clipMode = 10;

  enum ClipMode {
    EXACT = 0;
    SURROUNDING = 1;
  }
}
**/

message RequestCheckout {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 01;
  }

  string checkout = 1;
  string commit = 2;
}

message ReplyCheckout {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 01;
  }

  enum Status {
    SUCCESS = 0;
    EXISTED = 1;
    ERROR = 2;
  }
  Status status = 1;
}

message RequestListCheckouts {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 02;
  }
}

message ReplyListCheckouts {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 02;
  }

  repeated string checkouts = 1;
}

message RequestHierarchy {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 03;
  }

  string checkout = 1;
//  string hierarchy = 2;
}

message ReplyHierarchyLayer {
  //  name,   type
  map<string, LayerType> entities = 1;
}

message ReplyHierarchyMap {
  map<string, ReplyHierarchyLayer> layers = 1;
}

message ReplyHierarchy {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 03;
  }

  map<string, ReplyHierarchyMap> maps = 1;
}

message RequestEntitydata {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 04;
  }

  string checkout = 1;
  string entitypath = 2;
  // transmit large datasets piecewise
  uint64 offset = 3;
  uint64 maxlength = 4; // must fit into the servers and clients ram (e.g. 2gb maximum).
}

message ReplyEntitydata {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 04;
  }

  enum Status {
    SUCCESS = 0;
    NOT_FOUND = 404;
  }
  Status status = 1;
  uint64 length = 2;
}

message RequestOperatorExecution {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 101;
  }

  string checkout = 1;
  OperationDescription param = 2;
}

message ReplyOperatorExecution {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 101;
  }

  int32 error_code = 1; // operator specific error code (0 is ok)
  string error_msg = 2; // human readable error code (optional)
  ReplyHierarchy changed_entities = 3;
}

message RequestStoreEntity {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 102;
  }

  string checkout = 1;
  string path = 2;
  LayerType type = 3;
}

message ReplyStoreEntity {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 102;
  }

  enum Status {
    SUCCESS = 0;
    ALREADY_EXISTED = 1;
  }

  Status status = 1;
}
