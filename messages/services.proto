syntax = "proto3";
package upns;

/**
 * \brief A map containing multiple layers, grouping them logically together.
 *
 * The layers of a map share the same coordinate system. If an operation on the map's layers results in a layer,
 * which remains in the same coordinate system, a layer will be added to the originating map (for most operators \sa Operator ).
 * If the layer is not in the same coordinate system, a new mayp will be created.
 */

message Map {
  string name = 1;
  int64 id = 2;

  int64 lastChange = 3; // unix time

  repeated Layer layers = 4;

}

/**
 * \brief Type of binary layerdata saved
 * For each type correspnding wrappers must exist which handle serialization of a layer using \sa LayerDataStreamProvider.
 * Moreover spartial requests must be made possible by such a module \sa LayerData.
 */
enum LayerType {
  NONE = 0;
  POINTCLOUD2 = 1;
  OCTOMAP = 2;
  OPENVDB = 3;
  POSES = 4;
  LAST_PREDEFINED = 5;
}
enum LayerUsageType {
  LASER = 0;
  RADAR = 1;
  NAVIGATION = 2;
  ANNOTATION = 3;
}

message Layer {
  string name = 1;
  int64 id = 2;
  LayerType type = 3;
  LayerUsageType usageType = 4;
  repeated Entity entities = 5;
}

message Entity {
  int64 id = 1;
  int64 lastChange = 2; // unix time
  Transform tf = 3;
}

message Transform {
  float m00 = 1; // scale x
  float m01 = 2;
  float m02 = 3;
  float m03 = 4;
  float m10 = 5;
  float m11 = 6; // scale y
  float m12 = 7;
  float m13 = 8;
  float m20 = 9;
  float m21 = 10;
  float m22 = 11;
  float m23 = 12;
  float m30 = 13; // x
  float m31 = 14; // y
  float m32 = 15; // z
  float m33 = 16; // scale z
  int64 id = 17;
  int64 parentId = 18; // if parentId is 0, the transform is absolute and in the same coordinate system as the map's root transform
  int64 timestamp = 19; // 32bit seconds and 32bit nanoseconds
  repeated string tags = 20; // can be used to do things like: find the first transform in hierarchy with tag "robot"
}

message Commit {
    string commitId = 1;
    string parentCommitId = 2;
    repeated OperationDescription ops = 3;
    repeated ObjectVersion maps = 4;
    repeated ObjectVersion entities = 5;
}

message ObjectVersion {
    int64 id = 1;
    string commitId = 2;
}

message OperationDescription {
    string operatorName = 1;
    int32 operatorVersion = 2;
    repeated OperationParameter params = 3;
}

message OperationParameter {
    string                        key = 1;

    //optional, set one of these three
    int64                         intval = 2;
    double                        realval = 3;
    string                        strval = 4;
    int64                         transformval = 5;

    //... or set 1) map; 2) map and layer; 3) map, layer and entity
    int64      entityval = 6;
    int64       layerval = 7;
    int64         mapval = 8;
}

//message OperationParameterEntity {
//    int64 mapId = 1;
//    int64 layerId = 2;
//    int64 entityId = 3;
//}
//message OperationParameterLayer {
//    int64 mapId = 1;
//    int64 layerId = 2;
//}
//message OperationParameterMap {
//    int64 mapId = 1;
//}

//message OperationParameterTransform {
//    int64 tfId = 1;
//}

message Region {
  int64 layerId = 1;

  float minx = 2;
  float maxx = 3;
  float miny = 4;
  float maxy = 5;
  float minz = 6;
  float maxz = 7;
  int32 levelOfDetail = 8;
  bool announce = 9;
  ClipMode clipMode = 10;

  enum ClipMode {
    EXACT = 0;
    SURROUNDING = 1;
  }
}

message RegionData {
  int64 dataSize = 1;
  // Coded Stream if dataSize > 0
}

message ListMapsRequest {}

service MapService {
  rpc ListMaps (ListMapsRequest) returns (stream Map);
}

service LayerService {
  rpc GetRegion ( Region ) returns (stream RegionData);
}
