syntax = "proto3";

import "datastructs.proto";

package upns;

// COMP_ID:  20 for Requests, 21 for Replies.
// MSG_TYPE: same for req/rep-pairs. >100 indicates writing access to the server.

/**
message Region {
  int64 layerId = 1;

  float minx = 2;
  float maxx = 3;
  float miny = 4;
  float maxy = 5;
  float minz = 6;
  float maxz = 7;
  int32 levelOfDetail = 8;
  bool announce = 9;
  ClipMode clipMode = 10;

  enum ClipMode {
    EXACT = 0;
    SURROUNDING = 1;
  }
}
**/

message RequestCheckout {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 01;
  }

  string checkout = 1; // Checkout name
  repeated string commit = 2; // commit id to create a new checkout from (if it does not exist). Multiple for merge.
  // createIfNotExists: false: only check if this checkout exists.
  //                    true: create the checkout, if it did not exist. Returns the existing checkout otherwise
  bool   createIfNotExists = 3;
}

message ReplyCheckout {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 01;
  }

  enum Status {
    SUCCESS = 0;
    EXISTED = 1;
    ERROR = 2;
  }
  Status status = 1;
  repeated string commit = 2; // commit ids the current checkout is based on
}

message RequestListCheckouts {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 02;
  }
}

message ReplyListCheckouts {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 02;
  }

  repeated string checkouts = 1;
}

message RequestHierarchy {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 03;
  }

  string checkout = 1;
//  string hierarchy = 2;
}

message ReplyHierarchyLayer {
  //  name,   type
  map<string, LayerType> entities = 1;
}

message ReplyHierarchyMap {
  map<string, ReplyHierarchyLayer> layers = 1;
}

message ReplyHierarchy {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 03;
  }

  map<string, ReplyHierarchyMap> maps = 1;
}

message RequestEntitydata {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 04;
  }

  string checkout = 1;
  string entitypath = 2;
  // transmit large datasets piecewise
  uint64 offset = 3;
  // must fit into the servers and clients ram (e.g. 2gb maximum). Maybe even twice (*needs validation)
  // zero is treated as zero. server returns an header without raw data if maxlength is zero.
  uint64 maxlength = 4;
}
message ReplyEntitydata {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 04;
  }

  enum Status {
    SUCCESS = 0;
    EXCEEDED_BOUNDARY = 1;
    NOT_FOUND = 404;
  }
  Status status = 1;
  uint64 receivedlength = 2;
  uint64 entitylength = 3;
}

message RequestOperatorExecution {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 101;
  }

  string checkout = 1;
  OperationDescription param = 2;
}

message ReplyOperatorExecution {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 101;
  }

  int32 status_code = 1; // operator specific error code (0 is ok)
  string error_msg = 2; // human readable error code (optional)
  //ReplyHierarchy changed_entities = 3;
  OperationDescription result = 4;
}

// Note: This message is used as header for a binary raw message.
// If something with the header is wrong, all the sent data may be discarded.
// If the message does not fit into the servers RAM at once, the message is discarded.
// To handle this raw data can be split into multiple smaller pieces by using offset/sendlength/entitylength
message RequestStoreEntity {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 20;
    MSG_TYPE = 102;
  }

  string checkout = 1;
  string path = 2;
  LayerType type = 3;

  // transmit large datasets piecewise
  uint64 offset = 4;
  uint64 sendlength = 5; // must fit into the servers and clients ram (e.g. 2gb maximum). Maybe even twice (*needs validation)
  uint64 entitylength = 6; // must be at least sendlength.
}

message ReplyStoreEntity {
  enum CompType {
    PROTO_3  = 0;
    COMP_ID  = 21;
    MSG_TYPE = 102;
  }

  enum Status {
    SUCCESS = 0;
    ERROR = 1;
  }

  Status status = 1;
}
